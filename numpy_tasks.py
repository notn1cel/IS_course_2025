import numpy as np

def uniform_intervals(a, b, n):
    """1. —Å–æ–∑–¥–∞–µ—Ç numpy –º–∞—Å—Å–∏–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç a –¥–æ b –Ω–∞ n –æ—Ç—Ä–µ–∑–∫–æ–≤."""
    return np.linspace(a, b, n)


def cyclic123_array(n):
    """2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç numpy –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã 3ùëõ , –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ —á–∏—Å–ª–∞–º–∏ 1, 2, 3, 1, 2, 3, 1...."""
    return np.tile([1, 2, 3], n)

def first_n_odd_number(n):
    """3. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã—Ö n –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    return np.arange(1, n*2, 2)

def zeros_array_with_border(n):
    m = np.ones((n, n))
    m[1:-1, 1:-1] = 0
    """4. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n —Å "—Ä–∞–º–∫–æ–π" –∏–∑ –µ–¥–∏–Ω–∏—Ü –ø–æ –∫—Ä–∞—è–º."""

    return m

def chess_board(n):
    m = np.zeros((n, n))
    m[1::2, 1::2] = 1
    m[::2, ::2] = 1
    """5. –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ n x n —Å —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–æ–π –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü"""
    return m

def matrix_with_sum_index(n):
    m = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            m[i][j] += i+j
    """6. –°–æ–∑–¥–∞—ë—Ç ùëõ √ó ùëõ  –º–∞—Ç—Ä–∏—Ü—É —Å (ùëñ,ùëó)-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º ùëñ+ùëó."""
    return m

def cos_sin_as_two_rows(a, b, dx):
    m = np.arange(a, b, dx)
    co = np.cos(m)
    si = np.sin(m)
    """7. –í—ã—á–∏—Å–ª–∏—Ç–µ $cos(x)$ –∏ $sin(x)$ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b) —Å —à–∞–≥–æ–º dx, 
    –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤. """
    return np.array([co, si])

def compute_mean_rowssum_columnssum(A):
    """8. –î–ª—è numpy –º–∞—Å—Å–∏–≤–∞ A –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—É–º–º—É —Å—Ç—Ä–æ–∫ –∏ —Å—É–º–º—É —Å—Ç–æ–ª–±—Ü–æ–≤."""
    return np.mean(A), np.sum(A, axis=0), np.sum(A, axis=1)

def sort_array_by_column(A, j):
    """ 9. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ numpy –º–∞—Å—Å–∏–≤–∞ A –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è."""
    return A[np.argsort(A[:, j])]

def compute_integral(a, b, f, dx, method):
    """10. –°—á–∏—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ f –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [a, b] —Å —à–∞–≥–æ–º dx 3-–º—è –º–µ—Ç–æ–¥–∞–º–∏: """
    if method == 'rectangular': # - –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        return np.sum(f(np.arange(a, b, dx))) * dx
    elif method == 'trapezoidal': # - –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–∏–π
        return np.sum((f(np.arange(a, b, dx)) + f(np.arange(a + dx, b + dx/2, dx))) * dx / 2)
    elif method == 'simpson': # –º–µ—Ç–æ–¥–æ–º –°–∏–º–ø—Å–æ–Ω–∞
        return np.sum((f(np.arange(a, b, dx))
                       + 4*f(np.arange(a + dx/2, b + dx/2, dx))
                       + f(np.arange(a + dx, b + dx/2, dx))) * dx/6)
    pass